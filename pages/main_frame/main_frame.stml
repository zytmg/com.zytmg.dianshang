<template>
    <list-view id="listView" class="main" onscrolltolower={this.onscrolltolower}>
        <refresh class="refresh" state={refreshState} onstatechange={this.onstatechange}>
            <image class={refreshIconClass} src="../../image/refresh.png"></image>
            <image class={refreshLoadingClass} src="../../image/loading.gif"></image>
            <text class="refreshStateDesc">{refreshStateDesc}</text>
        </refresh>
        <list-header class="header">
            <image class="banner" src={this.data.bannerUrl} placeholder="../../image/default_rect.png" thumbnail="false" mode="widthFix">
        </list-header>
        <cell class="cell">
            <view data-id={item.id} data-wareCount={item.wareCount} class="container" onclick={this.fnOpenDetailWin}>
                <image class="thumbnail" src={item.thumbnail} placeholder="../../image/default_square.png"></image>
                <view class="info">
                    <text class="info-name">{item.name + ' ' + (item.unit||'')}</text>
                    <text class="info-description">{item.description}</text>
                    <text class="info-price">{'￥'+item.price}</text>
                    <text class="info-origin-price">{'￥'+item.originPrice}</text>
                </view>
                <view class="control">
                    <image class={'minus'+(item.wareCount>0?'':' none')} data-index={index} src="../../image/minus.png" onclick={this.fnMinus}>
                    <text class={'count'+(item.wareCount>0?'':' none')}>{item.wareCount}</text>
                    <image class="add" data-index={index} src="../../image/add.png" onclick={this.fnAdd}>
                </view>
            </view>
        </cell>
        <list-footer class="footer">
            <text class="loadDesc">{this.data.haveMoreData?'加载中...':'没有啦！'}</text>
        </list-footer>
    </list-view>
</template>
<script>
import $kn from "../../script/kn.js"
export default {
    name: 'main_frame',
    data() {
        return {
            bannerUrl: '',
            skip: 0,
            LIMIT: 10,
            haveMoreData: true,
            refreshState: 'normal'
        }
    },
    computed: {
        refreshIconClass(){
            if (this.data.refreshState == 'normal') {
                return 'refreshIcon-normal';
            } else if (this.data.refreshState == 'dragging') {
                return 'refreshIcon-dragging';
            } else if (this.data.refreshState == 'refreshing') {
                return 'refreshIcon-refreshing';
            }
        },
        refreshLoadingClass() {
            if (this.data.refreshState == 'refreshing') {
                return 'refreshLoading-refreshing';
            } else {
                return 'refreshLoading';
            }
        },
        refreshStateDesc() {
            if (this.data.refreshState == 'normal') {
                return '下拉可以刷新';
            } else if (this.data.refreshState == 'dragging') {
                return '松开可以刷新';
            } else if (this.data.refreshState == 'refreshing') {
                return '刷新中...';
            }
        }
    },
    methods: {
        onstatechange(e) {
            var state = e.detail.state;
            if (state == 'normal') {
                this.data.refreshState = 'normal';
            } else if (state == 'dragging') {
                this.data.refreshState = 'dragging';
            } else if (state == 'refreshing') {
                this.data.refreshState = 'refreshing';
                this.fnGetWareList(false);
            }
        },
        apiready() {
            this.data.bannerUrl = api.pageParam.wareType.banner.url;

            var that = this;
            setTimeout(function(){
                that.data.refreshState = 'refreshing';
                that.fnGetWareList(false);
            }, 200);
            
            var that = this;
            // 监听onGetCartInfo事件（自定义），更新商品数量和总金额
            api.addEventListener({
                name: 'onGetCartInfo'
            }, function(ret, err) {
                if (that.dataList && that.dataList.length > 0) {
                    that.getFixedWareList(that.dataList, ret.value.wareList);
                    var listView = document.getElementById('listView');
                    listView.load({
                        data: that.dataList
                    });
                }
            });
        },
        // 获取商品列表，通过loadMore_参数区分是首次加载还是加载更多
        fnGetWareList(loadMore_) {
            // 如果是加载更多，需要实现分页
            if (loadMore_) {
                this.data.skip += this.data.LIMIT;
            } else {
                this.data.skip = 0;
            }

            var currentCity = $kn.getCurrentCityInfo();
            var that = this;
            // 根据城市和商品分类获得相应的商品列表
            $kn.ajax({
                url: 'wares/getWareList',
                method: 'post',
                data: {
                    body: {
                        supportAreaId: currentCity?currentCity.id:'',
                        wareTypeId: api.pageParam.wareType.id,
                        skip: this.data.skip,
                        limit: this.data.LIMIT
                    }
                }
            }, function(ret, err) {
                if (ret && ret.data) {
                    var cartData = api.getGlobalData({key: 'cartInfo'});
                    var data = ret.data;
                    that.getFixedWareList(data, cartData?cartData.wareList:null);
                    var listView = document.getElementById('listView');
                    if (loadMore_) {
                        listView.insert({
                            data: data
                        });
                        that.dataList = that.dataList.concat(data);
                    } else {
                        that.dataList = data;
                        listView.load({
                            data: data
                        });
                    }
                    that.data.haveMoreData = data.length == that.data.LIMIT;
                } else {
                    api.toast({
                        msg: '加载数据失败',
                        duration: 2000,
                        location: 'bottom'
                    });
                }
                that.data.refreshState = 'normal';
            });
        },
        getFixedWareList(wareList, cartWareList) {
            for (var i=0;i<wareList.length;i++) {
                var item = wareList[i];
                item.wareCount = 0;
                if (cartWareList && cartWareList.length > 0) {
                    for (var j=0;j<cartWareList.length;j++) {
                        var cartItem = cartWareList[j];
                        if (cartItem.id == item.id) {
                            item.wareCount = cartItem.wareCount;
                        }
                    }
                }
            }
        },
        onscrolltolower() {
            if (this.data.haveMoreData) {
                this.fnGetWareList(true);
            }
        },
        fnOpenDetailWin(e) {
            var id = e.currentTarget.dataset.id;
            var wareCount = e.currentTarget.dataset.wareCount;
            api.openWin({
                name: 'ware'+id,
                url: '../ware/ware.stml',
                pageParam: {
                    wareId: id,
                    wareCount: wareCount
                },
                animation: {
                    type: "fade"
                }
            });
        },
        fnMinus(e) {
            if (!$kn.getUserInfo()) {
                api.openWin({
                    name: 'login',
                    url: '../login/login.stml'
                });
                return;
            }
            var index = e.currentTarget.dataset.index;
            var item = this.dataList[index];
            if (item.wareCount > 0) {
                item.wareCount--;
                var listView = document.getElementById('listView');
                listView.update({
                    index: index,
                    item: item
                });
                
                // 发送购物车更新自定义事件，传递商品Id和商品数量
                api.sendEvent({
                    name: 'updateShoppingCart',
                    extra: {
                        wareId: item.id,
                        wareCount: item.wareCount
                    }
                });
            }
        },
        fnAdd(e) {
            if (!$kn.getUserInfo()) {
                api.openWin({
                    name: 'login',
                    url: '../login/login.stml'
                });
                return;
            }
            var index = e.currentTarget.dataset.index;
            var item = this.dataList[index];
            item.wareCount++;
            var listView = document.getElementById('listView');
            listView.update({
                index: index,
                item: item
            });
                
            // 发送购物车更新自定义事件，传递商品Id和商品数量
            api.sendEvent({
                name: 'updateShoppingCart',
                extra: {
                    wareId: item.id,
                    wareCount: item.wareCount
                }
            });
        }
    }
}
</script>
<style>
    .refresh {
        align-items: center;
        justify-content: center;
    }
    .refreshStateDesc {
        color: #e3007f;
        font-size: 13px;
    }
    .refreshIcon-normal {
        position: absolute;
        width: 25px;
        height: 22px;
        bottom: 21px;
        left: 70px;
        transition-property: transform;
        transition-duration: 100ms;
        transform: rotate(0);
        visibility: visible;
    }
    .refreshIcon-dragging {
        transform: rotate(180deg);
    }
    .refreshIcon-refreshing {
        visibility: hidden;
    }
    .refreshLoading {
        position: absolute;
        width: 22px;
        height: 22px;
        bottom: 21px;
        left: 70px;
        visibility: hidden;
    }
    .refreshLoading-refreshing {
        visibility: visible;
    }

    .main {
        height: 100%;
    }

    .header {
        width: 100%;
        padding: 4px 8px;
    }
    
    .banner {
        width: 100%;
    }

    .cell {
        height: 130px;
        padding: 0 8px;
    }

    .container {
        flex-direction: row;
        align-items: center;
        width: 100%;
        height: 100%;
        border-bottom: 0.5px solid #d1d1d1;
    }

    .container:active {
        background-color: #f8f8f8;
    }
    
    .thumbnail {
        width: 100px;
        height: 100px;
    }
    
    .info {
        width: 100%;
        height: 100px;
        padding-left: 8px;
        justify-content: center;
    }
    
    .info-name {
        font-size: 16px;
        color: #000;
        font-weight: 500;
    }

    .info-description {
        font-size: 14px;
        color: gray;
    }
    
    .info-price {
        font-size: 14px;
        color: #e3007f;
    }
    
    .info-origin-price {
        font-size: 11px;
        color: #c0c0c0;
        text-decoration: line-through;
    }

    .control {
        flex-direction: row;
        position: absolute;
        right: 0;
        bottom: 20px;
    }
    
    .minus, .add {
        display: flex;
        width: 25px;
        height: 25px;
    }

    .minus:active {
        opacity: 0.7;
    }

    .add:active {
        opacity: 0.7;
    }

    .none {
        display: none;
    }
    
    .count {
        display: flex;
        width: 40px;
        height: 24px;
        line-height: 24px;
        margin: 0 5px;
        color: #444;
        font-size: 14px;
        text-align: center;
        border-radius: 12px;
        border: 1px solid #ddd;
        background-color: #fff;
    }
    
    .footer {
        height: 44px;
        justify-content: center;
        align-items: center;
    }

    .loadDesc {
        width: 200px;
        text-align: center;
    }
</style>
